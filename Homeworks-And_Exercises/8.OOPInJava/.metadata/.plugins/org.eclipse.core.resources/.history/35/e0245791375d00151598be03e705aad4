import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Triangle extends PlaneShape {
	private final int NUMBER_OF_VERTICES = 3;

	@Override
	public void addVertices(ArrayList<Vertex> vertices) {
		List<Vertex> verticesList = super.getVertices();
		for (Vertex vertex : vertices) {
			if (vertex.getzCoordinate() == null
					&& vertices.size() == NUMBER_OF_VERTICES) {
				verticesList.add(vertex);
			} else {
				throw new IllegalArgumentException(
						"Triangle should hold 3 2D vertices.");
			}
		}
	}

	@Override
	public double getArea() {
		List<Double> triangleSides = this.getTriangleSides();
		double sideOne = triangleSides.get(0);
		double sideTwo = triangleSides.get(1);
		double sideThree = triangleSides.get(2);
		double p = this.getPerimeter() / 2;
		double area = Math.sqrt(p * (p - sideOne) * (p - sideTwo) * (p - sideThree));
		return area;
	}

	@Override
	public double getPerimeter() {
		List<Double> triangleSides = this.getTriangleSides();
		double sideOne = triangleSides.get(0);
		double sideTwo = triangleSides.get(1);
		double sideThree = triangleSides.get(2);
		double perimeter = sideOne + sideTwo + sideThree;
		return perimeter;
	}

	private List<Double> getTriangleSides() {
		List<Vertex> vertices = super.getVertices();
		Vertex a = vertices.get(0);
		Vertex b = vertices.get(1);
		Vertex c = vertices.get(2);
		double sideOne = a.calculateDistanceBetweenTwo2DVertices(b);
		double sideTwo = b.calculateDistanceBetweenTwo2DVertices(c);
		double sideThree = c.calculateDistanceBetweenTwo2DVertices(a);
		List<Double> triangleSides = Arrays.asList(sideOne, sideTwo, sideThree);

		return triangleSides;
	}

}
