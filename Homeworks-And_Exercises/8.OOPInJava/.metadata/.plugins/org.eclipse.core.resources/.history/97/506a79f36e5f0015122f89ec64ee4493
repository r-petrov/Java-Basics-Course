package ExecutingPurchases;

import java.time.LocalDate;

import Enumerations.AgeRestriction;
import Messages.Messages;
import Products.Customer;
import Products.FoodProduct;
import Products.Product;

public final class PurchaseManager {
	private PurchaseManager() {
	}

	public static void processPurchase(Product product, Customer customer) {
		if (product.getQuantity() <= 0) {
			throw new IllegalArgumentException(Messages.noProductQuantity);
		}
		
		if (product instanceof FoodProduct) {
			String expirationDate = ((FoodProduct) product).getExpirationDate().toString();
			if (LocalDate.now().isAfter(LocalDate.parse(expirationDate))) {
				throw new IllegalArgumentException(Messages.expiredProduct);
			}
		}
		
		if (product.getPrice() > customer.getBalance()) {
			throw new IllegalArgumentException(Messages.notEnoughMoney);
		}
		
		if ((product.getAgeRestriction() == AgeRestriction.TEENAGER && customer.getAge() < 14) || 
				(product.getAgeRestriction() == AgeRestriction.ADULT && customer.getAge() < 18)) {
			throw new IllegalArgumentException(Messages.notOldEnough);
		}
		
		product.reduceQuantity();
		customer.exetutePayment(product.getPrice());
	}
}
