import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import Enumerations.AgeRestriction;
import Interfaces.Expirable;

public class FoodProduct extends Product implements Expirable {
	private final double EXPIRED_PRODUCT_PRICE_RATIO = 0.7;
	private Date creationDate;
	private Date expirationDate;

	public FoodProduct(String name, double price, int quantity,
			AgeRestriction ageRestriction) {
		super(name, price, quantity, ageRestriction);
		this.creationDate = new Date();
		this.setDateOfProductExpiration(expirationDate);
	}

	public Date getCreationDate() {
		return creationDate;
	}


	public void setExpirationDate(Date expirationDate) {
		this.expirationDate = expirationDate;
	}


	public void setDateOfProductExpiration(Calendar dateOfProductExpiration) {
		if (this.creationDate.compareTo(dateOfProductExpiration) >= 0) {
			throw new IllegalArgumentException(Messages.invalidProductDateOfExpiration);
		}
		this.expirationDate = dateOfProductExpiration;
	}

	@Override
	public double getPrice() {
		double price = this.getPrice();
		LocalDate currentDate = LocalDate.parse(new Date().toString());
		LocalDate expirationDate = LocalDate.parse(this.getExpirationDate().toString());
		long daysToProductExpiration = ChronoUnit.DAYS.between(currentDate, expirationDate);
		if (daysToProductExpiration < 15) {
			price = super.getPrice() * EXPIRED_PRODUCT_PRICE_RATIO;
		}
		return price;
	}
	
	@Override
	public Date getExpirationDate() {
		
		return this.expirationDate;
	}

	@Override
	public String toString() {
		StringBuilder result = new StringBuilder();
		result.append(super.toString());
		result.append(String.format(
				"Date of product creation: %s\nDate of product expiration: %s",
				this.creationDate, this.getExpirationDate()));
		return result.toString();
	}

}
